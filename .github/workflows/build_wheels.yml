name: Build

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-10.15]

    steps:
      - uses: actions/checkout@v2

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.1.2
        # to supply options, put them in 'env', like:
        # env:
        #   CIBW_SOME_OPTION: value
        env:
          # Only build on CPython and PyPy >=3
          CIBW_BUILD: "cp3?-*"
          # Run before build
          # CIBW_BEFORE_BUILD: python -m pip install numpy==1.19.5 Cython


      # This job creates a url (??) for a single release payload -- doesn't seem right for this case where
      # the artifact is a zip of multiple wheels
#      - name: Create release tag
#        id: create_url
#        uses: actions/create-release@v1
#        # Is this necessary?
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          # Example from https://stackoverflow.com/a/65650260/4200659
#          # Using short SHA from 2nd step for tag and release name.
#          # tag_name: ${{steps.short_sha.outputs.sha8}}
#          # release_name: ${{steps.short_sha.outputs.sha8}}
#          # Instead, just reuse the "latest" tag
#          tag_name: "latest"
#          release_name: "latest"
#          draft: false
#          prerelease: false

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl
          retention-days: 7

#  Actually this whole job requires a full dependencies install!!
#  install-dev:
#    strategy:
#      matrix:
#        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
#
#    name: "Verify dev env"
#    runs-on: "${{ matrix.os }}"
#
#    steps:
#      - uses: "actions/checkout@v2"
#      - uses: "actions/setup-python@v2"
#        with:
#          python-version: "3.8"
#      - name: "Setup env"
#        run: "python -m pip install numpy==1.19.5"
#      - name: "Install in dev mode"
#        run: "python -m pip install -e .[dev]"
#      - name: "Import package"
#        run: "python -c 'import ecogdata; print(ecogdata.__version__)'"